{"version":3,"sources":["hooks/useInterval.js","helpers/shuffle.js","helpers/getMinDuration.js","constants/COLORS.js","components/AddPlayerForm.js","components/CurrentPlayer.js","App.js","serviceWorker.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","shuffle","temporaryValue","randomIndex","originalArray","array","currentIndex","length","Math","floor","random","getMinDuration","delta","COLORS","50","100","200","500","1000","AddPlayerForm","setPlayer","playersMap","setPlayersMap","useState","name","setName","inputEl","action","onSubmit","e","preventDefault","trim","playerName","toLowerCase","money","ready","finished","focus","className","ref","type","placeholder","value","onChange","target","CurrentPlayer","onClick","initialMoney","initalRound","0","initialPlayer","localStorage","getItem","initialPlayersMap","JSON","parse","App","degree","setDegree","setMoney","transitionDuration","setTransitionDuration","round","touchStartX","settouchStartX","currentPageX","setCurrentPageX","prevPageX","setPrevPageX","swipeDirection","setSwipeDirection","swipeStart","setSwipeStart","isSwappingCards","setSwappingCards","prize","setPrize","player","playerStats","ANGLE","_onPress","data","pageX","_onMove","_onRelease","deltaX","abs","duration","targetDeg","remainder","newDegree","index","_prize","direction","setItem","stringify","role","aria-label","onTouchStart","undefined","touches","onTouchMove","onTouchEnd","onMouseDown","onMouseMove","onMouseUp","style","transform","onTransitionEnd","propertyName","map","item","key","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.18a0a0c5.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef()\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\nexport default useInterval\n","const shuffle = (originalArray = []) => {\n  const array = [...originalArray]\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex)\n    currentIndex -= 1\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex]\n    array[currentIndex] = array[randomIndex]\n    array[randomIndex] = temporaryValue\n  }\n  return array\n}\n\nexport default shuffle\n","const getMinDuration = delta => {\n  if (delta === 0) {\n    return 0\n  }\n  if (delta <= 10) {\n    return 1\n  }\n  if (delta <= 25) {\n    return 2.5\n  }\n  if (delta <= 50) {\n    return 4\n  }\n  if (delta <= 75) {\n    return 5.5\n  }\n  if (delta <= 100) {\n    return 7\n  }\n  return 8\n}\nexport default getMinDuration","const COLORS = {\n  50: '#cc3300',\n  100: '#cc66cc',\n  200: '#669933',\n  500: '#ffcc33',\n  1000: '#6699ff',\n}\nexport default COLORS","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { Fragment, useState, useRef } from 'react'\n\nfunction AddPlayerForm({ setPlayer, playersMap, setPlayersMap }) {\n  // console.log('props: ', props)\n  const [name, setName] = useState('')\n  const inputEl = useRef(null)\n  const _onChange = e => {\n    setName(e.target.value)\n  }\n  const _onSubmit = e => {\n    e.preventDefault()\n    if (!name.trim()) {\n      inputEl.current.focus()\n    } else {\n      const playerName = name.toLowerCase()\n      setPlayer(playerName)\n      if (!playersMap[playerName]) {\n        setPlayersMap({\n          ...playersMap,\n          [playerName]: {\n            money: 0,\n            ready: false,\n            finished: false,\n          }\n        })\n      }\n    }\n  }\n  return (\n    <form action=\"#\" onSubmit={_onSubmit}>\n      <div className=\"field has-addons\">\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            ref={inputEl}\n            type=\"text\"\n            placeholder=\"Enter name\"\n            value={name}\n            onChange={_onChange}\n          />\n        </div>\n        <div className=\"control\">\n          <button type=\"submit\" className=\"button is-success\">\n            Add Player\n          </button>\n        </div>\n      </div>\n    </form>\n  )\n}\nexport default AddPlayerForm\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { Fragment, useState, useRef } from 'react'\n\nfunction CurrentPlayer({ setPlayer, name }) {\n  const _onClick = e => {\n    e.preventDefault()\n    setPlayer('')\n  }\n  return (\n    <div className=\"current-player\">\n      <div className=\"tags has-addons are-medium\">\n        <span className=\"tag\">Hi!</span>\n        <span className=\"tag is-success is-capitalized\">\n          {name}\n          <button className=\"delete is-medium\" onClick={_onClick}></button>\n        </span>\n      </div>\n    </div>\n  )\n}\nexport default CurrentPlayer\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { Fragment, useState, useEffect } from 'react'\nimport useInterval from './hooks/useInterval'\nimport shuffle from './helpers/shuffle'\nimport getMinDuration from './helpers/getMinDuration'\nimport COLORS from './constants/COLORS'\nimport AddPlayerForm from './components/AddPlayerForm'\nimport CurrentPlayer from './components/CurrentPlayer'\n\nimport './App.scss'\n\nconst rounds = {\n  0: [1000, 1000, 500, 500, 500, 200, 200, 200, 200, 200, 200, 200],\n}\n\nconst initialMoney = 0\nconst initalRound = shuffle(rounds[initialMoney])\nconst initialPlayer = localStorage.getItem('__PLAYER__')\nconst initialPlayersMap = JSON.parse(localStorage.getItem('__PLAYERS_MAP__'))\n\nfunction App() {\n  const [degree, setDegree] = useState(0)\n  const [money, setMoney] = useState(initialMoney)\n  const [transitionDuration, setTransitionDuration] = useState(1)\n  const [round, setRound] = useState(initalRound)\n  const [touchStartX, settouchStartX] = useState(0)\n  const [currentPageX, setCurrentPageX] = useState(0)\n  const [prevPageX, setPrevPageX] = useState(0)\n  const [swipeDirection, setSwipeDirection] = useState('')\n  const [swipeStart, setSwipeStart] = useState(0)\n  const [isSwappingCards, setSwappingCards] = useState(false)\n  const [prize, setPrize] = useState(0)\n  const [player, setPlayer] = useState(initialPlayer || '')\n  const [playersMap, setPlayersMap] = useState(initialPlayersMap || {})\n  const playerStats = playersMap[player]\n  const ANGLE = 360 / round.length\n  // const _onNext = () => {\n  //   const newDegree = degree + ANGLE\n  //   setDegree(newDegree)\n  // }\n  // const _onPrev = () => {\n  //   const newDegree = degree - ANGLE\n  //   setDegree(newDegree)\n  // }\n  const ALLOWED_TIME = 500\n  const _onTouchStart = e => {\n    if (e.touches.length === 1) {\n      _onPress(e.touches[0])\n    }\n  }\n  const _onMouseDown = e => {\n    _onPress(e)\n  }\n  const _onPress = data => {\n    if (prize) {\n      return\n    }\n    settouchStartX(data.pageX)\n    setSwipeStart(data.pageX)\n    setCurrentPageX(data.pageX)\n    setTransitionDuration(0)\n  }\n  const _onTouchMove = e => {\n    if (e.touches.length === 1) {\n      _onMove(e.touches[0])\n    }\n  }\n  const _onMouseMove = e => {\n    if (touchStartX) {\n      _onMove(e)\n    }\n  }\n  const _onMove = data => {\n    if (prize) {\n      return\n    }\n    setDegree(data.pageX - touchStartX)\n    setPrevPageX(currentPageX)\n    setCurrentPageX(data.pageX)\n  }\n  const _onTouchEnd = e => {\n    if (e.touches.length === 0) {\n      _onRelease()\n    }\n  }\n  const _onMouseUp = () => {\n    if (touchStartX) {\n      _onRelease()\n    }\n  }\n  const _onRelease = () => {\n    if (prize) {\n      return\n    }\n    const deltaX = Math.abs(currentPageX - swipeStart)\n    const duration = Math.round(deltaX / 100) + getMinDuration(deltaX)\n    setTransitionDuration(duration)\n    settouchStartX(0)\n    setSwipeStart(0)\n    setCurrentPageX(0)\n    const targetDeg = swipeDirection === 'left' ? degree - deltaX * duration : degree + deltaX * duration\n    const remainder = targetDeg % ANGLE\n    let newDegree = swipeDirection === 'left' ? targetDeg - remainder : targetDeg + (ANGLE - remainder)\n    if (deltaX === 0) {\n      newDegree = degree\n    }\n    const index = Math.round((newDegree / ANGLE) % round.length)\n    let _prize = 0\n    if (index <= 0) {\n      _prize = round[Math.abs(index)]\n    } else {\n      _prize = round[round.length - index]\n    }\n    setDegree(newDegree)\n    if (player && playerStats.ready) {\n      if (deltaX >= 100) {\n        setPrize(_prize || 0)\n      } else {\n        // swipe faster\n      }\n    } else {\n      // trial spin\n    }\n  }\n  const _onTransitionEnd = e => {\n    if (e.propertyName === 'transform' && prize) {\n      setMoney(prize)\n      setPrize(0)\n    }\n  }\n  useEffect(() => {\n    const direction = currentPageX > prevPageX ? 'right' : 'left'\n    if (currentPageX && swipeDirection !== direction) {\n      setSwipeDirection(direction)\n      setSwipeStart(currentPageX)\n    }\n  }, [currentPageX])\n  useEffect(() => {\n    localStorage.setItem('__PLAYERS_MAP__', JSON.stringify(playersMap))\n  }, [playersMap])\n  useEffect(() => {\n    localStorage.setItem('__PLAYER__', player)\n    if (player) {\n      setTransitionDuration(0)\n      setDegree(0)\n    }\n  }, [player])\n  useInterval(\n    () => {\n      setSwipeStart(currentPageX)\n    },\n    swipeStart ? ALLOWED_TIME : null\n  )\n  return (\n    <Fragment>\n      <nav className=\"navbar is-info\" role=\"navigation\" aria-label=\"main navigation\">\n        <div className=\"is-pulled-left\">\n          <div className=\"navbar-brand\">\n            <span className=\"navbar-item image has-text-weight-bold\">Carousel</span>\n          </div>\n        </div>\n        <div className=\"container is-fluid\">\n          <div className=\"navbar-item\">\n            {!player && <AddPlayerForm setPlayer={setPlayer} playersMap={playersMap} setPlayersMap={setPlayersMap} />}\n            {!!player && <CurrentPlayer name={player} setPlayer={setPlayer} />}\n          </div>\n        </div>\n      </nav>\n      <div className=\"app\">\n        <div className=\"controls controls-upper\">\n          {!player && <h1 className=\"title is-3 has-text-grey\">Enter your name to start</h1>}\n          {!!playerStats && !playerStats.ready && !playerStats.finished && (\n            <div className=\"container is-fluid mt-10\">\n              <div className=\"has-text-grey is-flex align-items-center justify-content-center\">\n                Press{' '}\n                <button\n                  className=\"button ml-5 mr-5\"\n                  onClick={() => {\n                    setDegree(0)\n                    setTransitionDuration(0)\n                    setSwappingCards(true)\n                  }}\n                >\n                  Swap Cards\n                </button>{' '}\n                to randomly swap cards.\n              </div>\n              <div className=\"has-text-grey is-flex align-items-center justify-content-center mt-5\">\n                Press <button className=\"button is-primary ml-5 mr-5\">I'm Ready</button> when you're ready to spin.\n              </div>\n            </div>\n          )}\n        </div>\n        <div\n          className={`carousel-swipe-container ${isSwappingCards ? 'swapping' : ''}`}\n          onTouchStart={isSwappingCards ? undefined : _onTouchStart}\n          onTouchMove={isSwappingCards ? undefined : _onTouchMove}\n          onTouchEnd={isSwappingCards ? undefined : _onTouchEnd}\n          onMouseDown={isSwappingCards ? undefined : _onMouseDown}\n          onMouseMove={isSwappingCards ? undefined : _onMouseMove}\n          onMouseUp={isSwappingCards ? undefined : _onMouseUp}\n        >\n          <div className={`carousel-container`}>\n            <div\n              className=\"carousel\"\n              style={{\n                transform: 'rotateY(' + degree + 'deg)',\n                transitionDuration: `${transitionDuration}s`,\n              }}\n              onTransitionEnd={_onTransitionEnd}\n            >\n              {round.map((item, index) => {\n                const style = isSwappingCards\n                  ? {}\n                  : { transform: `rotateY(${index * ANGLE}deg) translateZ(${round.length * 20}px)` }\n                return (\n                  <div\n                    className=\"item\"\n                    key={`item-${item}-${index}`}\n                    style={{ backgroundColor: `${COLORS[item]}`, ...style }}\n                  >\n                    {item}\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n        <div className=\"controls controls-lower\"></div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}