{"version":3,"sources":["hooks/useInterval.js","helpers/shuffle.js","components/AddPlayerForm.js","components/CurrentPlayer.js","App.js","serviceWorker.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","shuffle","temporaryValue","randomIndex","originalArray","array","currentIndex","length","Math","floor","random","AddPlayerForm","setPlayer","useState","name","setName","inputEl","action","onSubmit","e","preventDefault","trim","focus","className","ref","type","placeholder","value","onChange","target","CurrentPlayer","onClick","initialMoney","initalRound","0","initialPlayer","localStorage","getItem","App","round","currentPageX","prevPageX","swipeDirection","setSwipeDirection","swipeStart","setSwipeStart","player","direction","setItem","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70b66ef0.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef()\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\nexport default useInterval\n","const shuffle = (originalArray = []) => {\n  const array = [...originalArray]\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex)\n    currentIndex -= 1\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex]\n    array[currentIndex] = array[randomIndex]\n    array[randomIndex] = temporaryValue\n  }\n  return array\n}\n\nexport default shuffle\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { Fragment, useState, useRef } from 'react'\n\nfunction AddPlayerForm({ setPlayer }) {\n  // console.log('props: ', props)\n  const [name, setName] = useState('')\n  const inputEl = useRef(null)\n  const _onChange = e => {\n    setName(e.target.value)\n  }\n  const _onSubmit = e => {\n    e.preventDefault()\n    if (!name.trim()) {\n      inputEl.current.focus()\n    } else {\n      setPlayer(name)\n    }\n  }\n  return (\n    <form action=\"#\" onSubmit={_onSubmit}>\n      <div className=\"field has-addons\">\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            ref={inputEl}\n            type=\"text\"\n            placeholder=\"Enter name\"\n            value={name}\n            onChange={_onChange}\n          />\n        </div>\n        <div className=\"control\">\n          <button type=\"submit\" className=\"button is-success\">\n            Add Player\n          </button>\n        </div>\n      </div>\n    </form>\n  )\n}\nexport default AddPlayerForm\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { Fragment, useState, useRef } from 'react'\n\nfunction CurrentPlayer({ setPlayer, name }) {\n  const _onClick = e => {\n    setPlayer('')\n  }\n  return (\n    <div className=\"current-player\">\n      <span className=\"greeting\">Hi</span>\n      <div className=\"tags has-addons are-medium\">\n        <span className=\"tag is-warning is-capitalized\">{name}</span>\n        <button className=\"tag is-delete is-danger\" onClick={_onClick}></button>\n      </div>\n    </div>\n  )\n}\nexport default CurrentPlayer\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { Fragment, useState, useEffect } from 'react'\nimport useInterval from './hooks/useInterval'\nimport shuffle from './helpers/shuffle'\nimport getMinDuration from './helpers/getMinDuration'\nimport COLORS from './constants/COLORS'\nimport AddPlayerForm from './components/AddPlayerForm'\nimport CurrentPlayer from './components/CurrentPlayer'\n\nimport './App.scss'\n\nconst rounds = {\n  0: [1000, 1000, 500, 500, 500, 500, 200, 200, 200, 200, 200, 200],\n}\n\nconst initialMoney = 0\nconst initalRound = shuffle(rounds[initialMoney])\nconst initialPlayer = localStorage.getItem('__PLAYER__')\n\nfunction App() {\n  const [degree, setDegree] = useState(0)\n  const [money, setMoney] = useState(initialMoney)\n  const [transitionDuration, setTransitionDuration] = useState(1)\n  const [round, setRound] = useState(initalRound)\n  const [touchStartX, settouchStartX] = useState(0)\n  const [currentPageX, setCurrentPageX] = useState(0)\n  const [prevPageX, setPrevPageX] = useState(0)\n  const [swipeDirection, setSwipeDirection] = useState('')\n  const [swipeStart, setSwipeStart] = useState(0)\n  const [prize, setPrize] = useState(0)\n  const [player, setPlayer] = useState(initialPlayer || '')\n  const ANGLE = 360 / round.length\n  // const _onNext = () => {\n  //   const newDegree = degree + ANGLE\n  //   setDegree(newDegree)\n  // }\n  // const _onPrev = () => {\n  //   const newDegree = degree - ANGLE\n  //   setDegree(newDegree)\n  // }\n  const ALLOWED_TIME = 500\n  const _onTouchStart = e => {\n    if (e.touches.length === 1) {\n      _onPress(e.touches[0])\n    }\n  }\n  const _onMouseDown = e => {\n    _onPress(e)\n  }\n  const _onPress = data => {\n    if (prize) {\n      return\n    }\n    settouchStartX(data.pageX)\n    setSwipeStart(data.pageX)\n    setCurrentPageX(data.pageX)\n    setTransitionDuration(0)\n  }\n  const _onTouchMove = e => {\n    if (e.touches.length === 1) {\n      _onMove(e.touches[0])\n    }\n  }\n  const _onMouseMove = e => {\n    if (touchStartX) {\n      _onMove(e)\n    }\n  }\n  const _onMove = data => {\n    if (prize) {\n      return\n    }\n    setDegree(data.pageX - touchStartX)\n    setPrevPageX(currentPageX)\n    setCurrentPageX(data.pageX)\n  }\n  const _onTouchEnd = e => {\n    if (e.touches.length === 0) {\n      _onRelease()\n    }\n  }\n  const _onMouseUp = () => {\n    if (touchStartX) {\n      _onRelease()\n    }\n  }\n  const _onRelease = () => {\n    if (prize) {\n      return\n    }\n    const deltaX = Math.abs(currentPageX - swipeStart)\n    const duration = Math.round(deltaX / 100) + getMinDuration(deltaX)\n    setTransitionDuration(duration)\n    settouchStartX(0)\n    setSwipeStart(0)\n    setCurrentPageX(0)\n    const targetDeg = swipeDirection === 'left' ? degree - deltaX * duration : degree + deltaX * duration\n    const remainder = targetDeg % ANGLE\n    let newDegree = swipeDirection === 'left' ? targetDeg - remainder : targetDeg + (ANGLE - remainder)\n    if (deltaX === 0) {\n      newDegree = degree\n    }\n    const index = Math.round((newDegree / ANGLE) % round.length)\n    let _prize = 0\n    if (index <= 0) {\n      _prize = round[Math.abs(index)]\n    } else {\n      _prize = round[round.length - index]\n    }\n    setDegree(newDegree)\n    if (deltaX >= 100) {\n      setPrize(_prize || 0)\n    } else {\n      // swipe faster\n    }\n  }\n  const _onTransitionEnd = e => {\n    if (e.propertyName === 'transform' && prize) {\n      setMoney(prize)\n      setPrize(0)\n    }\n  }\n  useEffect(() => {\n    const direction = currentPageX > prevPageX ? 'right' : 'left'\n    if (currentPageX && swipeDirection !== direction) {\n      setSwipeDirection(direction)\n      setSwipeStart(currentPageX)\n    }\n  }, [currentPageX])\n  useEffect(() => {\n    localStorage.setItem('__PLAYER__', player)\n  }, [player])\n  useInterval(\n    () => {\n      setSwipeStart(currentPageX)\n    },\n    swipeStart ? ALLOWED_TIME : null\n  )\n  return (\n    <Fragment>\n      <nav className=\"navbar is-info\" role=\"navigation\" aria-label=\"main navigation\">\n        <div className=\"is-pulled-left\">\n          <div className=\"navbar-brand\">\n            <span className=\"navbar-item image has-text-weight-bold\">X-mas Carousel</span>\n          </div>\n        </div>\n        <div className=\"container is-fluid\">\n          <div className=\"navbar-item\">\n            {!player && <AddPlayerForm setPlayer={setPlayer} />}\n            {!!player && <CurrentPlayer name={player} setPlayer={setPlayer} />}\n          </div>\n        </div>\n      </nav>\n    </Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}