{"version":3,"sources":["hooks/useInterval.js","helpers/shuffle.js","helpers/getMinDuration.js","constants/COLORS.js","components/AddPlayerForm.js","components/CurrentPlayer.js","components/ModeDropdown.js","components/Players.js","App.js","serviceWorker.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","shuffle","temporaryValue","randomIndex","originalArray","array","currentIndex","length","Math","floor","random","getMinDuration","delta","COLORS","50","100","200","500","1000","AddPlayerForm","setPlayer","playersMap","setPlayersMap","useState","name","setName","inputEl","action","className","onSubmit","e","preventDefault","trim","playerName","toLowerCase","money","finished","spinsLeft","blur","focus","ref","type","placeholder","value","onChange","target","CurrentPlayer","ModeDropdown","player","mode","setMode","active","setActive","_changeMode","data","cx","disabled","aria-haspopup","aria-controls","onClick","aria-hidden","role","href","bind","_onDeleteClick","stopPropagation","newPlayersMap","playersArray","Object","keys","filter","sort","a","b","map","key","rounds","0","700","600","400","300","initialPlayer","localStorage","getItem","initialMode","initialPlayersMap","JSON","parse","App","degree","setDegree","transitionDuration","setTransitionDuration","playerStats","initalRound","round","setRound","isSettingActive","setSettings","touchStartX","settouchStartX","currentPageX","setCurrentPageX","prevPageX","setPrevPageX","swipeDirection","setSwipeDirection","swipeStart","setSwipeStart","isSwappingCards","setSwappingCards","isPlayerReady","setPlayerReady","prize","setPrize","prizeWon","setPrizeWon","ANGLE","_onPress","pageX","_onMove","_onRelease","deltaX","abs","duration","targetDeg","remainder","newDegree","index","_prize","direction","setItem","stringify","spinning","ready","item","style","backgroundColor","String","split","letter","i","onTouchStart","undefined","touches","onTouchMove","onTouchEnd","onMouseDown","onMouseMove","onMouseUp","transform","onTransitionEnd","propertyName","Players","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.3377bbbd.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef()\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\nexport default useInterval\n","const shuffle = (originalArray = []) => {\n  const array = [...originalArray]\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex)\n    currentIndex -= 1\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex]\n    array[currentIndex] = array[randomIndex]\n    array[randomIndex] = temporaryValue\n  }\n  return array\n}\n\nexport default shuffle\n","const getMinDuration = delta => {\n  if (delta === 0) {\n    return 0\n  }\n  if (delta <= 10) {\n    return 1\n  }\n  if (delta <= 25) {\n    return 2.5\n  }\n  if (delta <= 50) {\n    return 4\n  }\n  if (delta <= 75) {\n    return 5.5\n  }\n  if (delta <= 100) {\n    return 7\n  }\n  return 8\n}\nexport default getMinDuration","const COLORS = {\n  50: '#f4733e',\n  100: '#ac6ca0',\n  200: '#99cc33',\n  500: '#ffcc66',\n  1000: '#6699cc',\n}\nexport default COLORS","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { Fragment, useState, useRef } from 'react'\n\nfunction AddPlayerForm({ setPlayer, playersMap, setPlayersMap }) {\n  // console.log('props: ', props)\n  const [name, setName] = useState('')\n  const inputEl = useRef(null)\n  const _onChange = e => {\n    setName(e.target.value)\n  }\n  const _onSubmit = e => {\n    e.preventDefault()\n    if (!name.trim()) {\n      inputEl.current.focus()\n    } else {\n      const playerName = name.toLowerCase()\n      setPlayer(playerName)\n      if (!playersMap[playerName]) {\n        setPlayersMap({\n          ...playersMap,\n          [playerName]: {\n            money: 0,\n            finished: false,\n            spinsLeft: 3,\n          }\n        })\n      }\n      setName('')\n      inputEl.current.blur()\n    }\n  }\n  return (\n    <form action=\"#\" className=\"add-player\" onSubmit={_onSubmit}>\n      <div className=\"field has-addons\">\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            ref={inputEl}\n            type=\"text\"\n            placeholder=\"Enter name\"\n            value={name}\n            onChange={_onChange}\n          />\n        </div>\n        <div className=\"control\">\n          <button type=\"submit\" className=\"button is-info\">\n            Submit\n          </button>\n        </div>\n      </div>\n    </form>\n  )\n}\nexport default AddPlayerForm\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { Fragment, useState, useRef } from 'react'\n\nfunction CurrentPlayer({ setPlayer, name, money }) {\n  const _onClick = e => {\n    e.preventDefault()\n    setPlayer('')\n  }\n  return (\n    <div className=\"current-player\">\n      <div className=\"tags has-addons are-medium\">\n        <span className=\"tag is-success is-capitalized\">{name}</span>\n        <span className=\"tag\">\n          {money}\n        </span>\n      </div>\n    </div>\n  )\n}\nexport default CurrentPlayer\n","/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState } from 'react'\nimport cx from 'classnames'\n\nfunction ModeDropdown({ player, mode, setMode }) {\n  const [active, setActive] = useState(false)\n  const _onClick = e => {\n    e.preventDefault()\n    setActive(!active)\n  }\n  const _changeMode = (data, e) => {\n    e.preventDefault()\n    setMode(data)\n    setActive(false)\n  }\n  return (\n    <div className={cx('dropdown is-right', { 'is-active': active })}>\n      <div className=\"dropdown-trigger\">\n        <button\n          className=\"button\"\n          disabled={!!player}\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={_onClick}\n        >\n          <span className=\"is-capitalized\">{mode}</span>\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\n          </span>\n        </button>\n      </div>\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          <a href=\"#\" className=\"dropdown-item\" onClick={_changeMode.bind(null, 'kids')}>\n            Kids\n          </a>\n          <a href=\"#\" className=\"dropdown-item\" onClick={_changeMode.bind(null, 'adults')}>\n            Adults\n          </a>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default ModeDropdown\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { Fragment, useState, useRef } from 'react'\n\nfunction CurrentPlayer({ playersMap, active, player, setPlayer, setPlayersMap }) {\n  if (!active) {\n    return null\n  }\n  const _onDeleteClick = (data, e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    const newPlayersMap = { ...playersMap }\n    delete newPlayersMap[data]\n    setPlayersMap({\n      ...newPlayersMap,\n    })\n    if (data === player) {\n      setPlayer('')\n    }\n  }\n  const playersArray = Object.keys(playersMap)\n    .filter(name => !playersMap[name].spinsLeft)\n    .sort((a, b) => {\n      return playersMap[b].money - playersMap[a].money\n    })\n  return (\n    <div className=\"players\">\n      <p className=\"menu-label\">Players</p>\n      <ul className=\"menu-list\">\n        {playersArray.map(name => {\n          return (\n            <li key={name} className=\"\">\n              <div className=\"menu-item\">\n                <span className=\"is-capitalized\">{name}</span>\n                <span className=\"tag is-success is-medium\">\n                  {playersMap[name].money} <span className=\"delete\" onClick={_onDeleteClick.bind(null, name)}></span>\n                </span>\n              </div>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\nexport default CurrentPlayer\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { Fragment, useState, useEffect } from 'react'\nimport useInterval from './hooks/useInterval'\nimport cx from 'classnames'\nimport shuffle from './helpers/shuffle'\nimport getMinDuration from './helpers/getMinDuration'\nimport COLORS from './constants/COLORS'\nimport AddPlayerForm from './components/AddPlayerForm'\nimport CurrentPlayer from './components/CurrentPlayer'\nimport ModeDropdown from './components/ModeDropdown'\nimport Players from './components/Players'\n\nimport './App.sass'\n\nconst rounds = {\n  0: [1000, 1000, 500, 500, 500, 200, 200, 200, 200, 200, 200, 200],\n  500: [200, 200, 200, 200, 100, 100, 100, 100, 100, 100, 100, 100],\n  200: [500, 500, 200, 200, 200, 200, 200, 200, 100, 100, 100, 100],\n  700: [100, 100, 100, 100, 50, 50, 50, 50, 50, 50, 50, 50],\n  600: [200, 200, 200, 100, 100, 100, 100, 100, 100, 100, 100, 100],\n  400: [200, 200, 200, 200, 200, 200, 100, 100, 100, 100, 100, 100],\n  300: [200, 200, 200, 200, 200, 200, 200, 200, 100, 100, 100, 100],\n}\n\nconst initialPlayer = localStorage.getItem('__PLAYER__')\nconst initialMode = localStorage.getItem('__MODE__')\nconst initialPlayersMap = JSON.parse(localStorage.getItem('__PLAYERS_MAP__'))\n\nfunction App() {\n  const [degree, setDegree] = useState(0)\n  const [transitionDuration, setTransitionDuration] = useState(1)\n  const [playersMap, setPlayersMap] = useState(initialPlayersMap || {})\n  const [mode, setMode] = useState(initialMode || 'kids')\n  const [player, setPlayer] = useState(initialPlayer || '')\n  // console.log('player: ', player)\n  const playerStats = playersMap[player]\n  // console.log('playerStats: ', playerStats)\n  const initalRound = shuffle(rounds[!!playerStats ? playerStats.money : 0])\n  // console.log('initalRound: ', initalRound)\n  const [round, setRound] = useState(initalRound)\n  // console.log('round: ', round)\n  const [isSettingActive, setSettings] = useState(false)\n  const [touchStartX, settouchStartX] = useState(0)\n  const [currentPageX, setCurrentPageX] = useState(0)\n  const [prevPageX, setPrevPageX] = useState(0)\n  const [swipeDirection, setSwipeDirection] = useState('')\n  const [swipeStart, setSwipeStart] = useState(0)\n  const [isSwappingCards, setSwappingCards] = useState(false)\n  const [isPlayerReady, setPlayerReady] = useState(false)\n  const [prize, setPrize] = useState(0)\n  const [prizeWon, setPrizeWon] = useState(0)\n  const ANGLE = 360 / round.length\n  const ALLOWED_TIME = 500\n  const _onTouchStart = e => {\n    if (e.touches.length === 1) {\n      _onPress(e.touches[0])\n    }\n  }\n  const _onMouseDown = e => {\n    _onPress(e)\n  }\n  const _onPress = data => {\n    if (prize) {\n      return\n    }\n    settouchStartX(data.pageX)\n    setSwipeStart(data.pageX)\n    setCurrentPageX(data.pageX)\n    setTransitionDuration(0)\n  }\n  const _onTouchMove = e => {\n    if (e.touches.length === 1) {\n      _onMove(e.touches[0])\n    }\n  }\n  const _onMouseMove = e => {\n    if (touchStartX) {\n      _onMove(e)\n    }\n  }\n  const _onMove = data => {\n    if (prize) {\n      return\n    }\n    setDegree(data.pageX - touchStartX)\n    setPrevPageX(currentPageX)\n    setCurrentPageX(data.pageX)\n  }\n  const _onTouchEnd = e => {\n    if (e.touches.length === 0) {\n      _onRelease()\n    }\n  }\n  const _onMouseUp = () => {\n    if (touchStartX) {\n      _onRelease()\n    }\n  }\n  const _onRelease = () => {\n    if (prize) {\n      return\n    }\n    const deltaX = Math.abs(currentPageX - swipeStart)\n    const duration = Math.round(deltaX / 100) + getMinDuration(deltaX)\n    setTransitionDuration(duration)\n    settouchStartX(0)\n    setSwipeStart(0)\n    setCurrentPageX(0)\n    const targetDeg = swipeDirection === 'left' ? degree - deltaX * duration : degree + deltaX * duration\n    const remainder = targetDeg % ANGLE\n    let newDegree = swipeDirection === 'left' ? targetDeg - remainder : targetDeg + (ANGLE - remainder)\n    if (deltaX === 0) {\n      newDegree = degree\n    }\n    const index = Math.round((newDegree / ANGLE) % round.length)\n    let _prize = 0\n    if (index <= 0) {\n      _prize = round[Math.abs(index)]\n    } else {\n      _prize = round[round.length - index]\n    }\n    setDegree(newDegree)\n    if (player && isPlayerReady) {\n      if (deltaX >= 100) {\n        setPrize(_prize || 0)\n      } else {\n        // swipe faster\n      }\n    } else {\n      // trial spin\n    }\n  }\n  const _onTransitionEnd = e => {\n    if (e.propertyName === 'transform' && prize) {\n      const money = playerStats.money + prize\n      setPlayersMap({\n        ...playersMap,\n        [player]: {\n          ...playerStats,\n          money: money,\n          spinsLeft: prize === 1000 ? 0 : playerStats.spinsLeft - 1,\n        },\n      })\n      setPrizeWon(prize)\n      setRound(shuffle(rounds[money]))\n    }\n  }\n  useEffect(() => {\n    const direction = currentPageX > prevPageX ? 'right' : 'left'\n    if (currentPageX && swipeDirection !== direction) {\n      setSwipeDirection(direction)\n      setSwipeStart(currentPageX)\n    }\n  }, [currentPageX])\n  useEffect(() => {\n    localStorage.setItem('__PLAYERS_MAP__', JSON.stringify(playersMap))\n  }, [playersMap])\n  useEffect(() => {\n    localStorage.setItem('__PLAYER__', player)\n    if (player) {\n      setTransitionDuration(0)\n      setDegree(0)\n    } else {\n      setSwappingCards(false)\n    }\n  }, [player])\n  useEffect(() => {\n    localStorage.setItem('__MODE__', mode)\n  }, [mode])\n  useInterval(\n    () => {\n      setSwipeStart(currentPageX)\n    },\n    swipeStart ? ALLOWED_TIME : null\n  )\n  return (\n    <Fragment>\n      <nav className={cx('nav has-background-info', { spinning: !!prize })}>\n        <span\n          className=\"background has-text-white-bis has-text-weight-bold\"\n          onClick={() => {\n            setSettings(!isSettingActive)\n          }}\n        >\n          {isSettingActive ? 'Back' : 'Carousel'}\n        </span>\n        <div className=\"player-info\">\n          {!!playerStats && <CurrentPlayer name={player} setPlayer={setPlayer} money={playerStats.money} />}\n        </div>\n        <div className={cx('goodluck', { ready: !!isPlayerReady })}>\n          <p className=\"has-text-grey-dark is-capitalized is-size-4\">Goodluck {player}!</p>\n        </div>\n      </nav>\n      <main className=\"main\">\n        <div className=\"screen active\">\n          <div className=\"screen-content\">\n            <p className=\"has-text-grey-dark is-size-5\">Please enter you name to start</p>\n            <AddPlayerForm setPlayer={setPlayer} playersMap={playersMap} setPlayersMap={setPlayersMap} />\n          </div>\n        </div>\n        {!!playerStats && (\n          <div className={cx('screen', { active: !playerStats.spinsLeft })}>\n            <div className=\"screen-content\">\n              <p className=\"has-text-grey-dark is-size-3\">Congratulations!!!</p>\n              <p className=\"has-text-grey-dark is-size-6\">on winning a total of</p>\n              <p className=\"has-text-dark-grey is-size-1\">{playerStats.money}</p>\n              <button\n                className=\"btn-logout button is-info is-medium\"\n                onClick={() => {\n                  setPlayer('')\n                  setRound(shuffle(rounds[0]))\n                }}\n              >\n                Thank You!\n              </button>\n            </div>\n          </div>\n        )}\n\n        <div className={cx('screen', { active: !!playerStats && !!playerStats.spinsLeft })}>\n          <div className=\"screen-content\">\n            <p className=\"has-text-grey-dark is-size-6\">Here's how your cards are arranged right now.</p>\n            <div className=\"card-arrangements\">\n              {round.map((item, index) => {\n                return (\n                  <div className=\"card\" key={`item-${item}-${index}`} style={{ backgroundColor: `${COLORS[item]}` }}>\n                    {String(item)\n                      .split('')\n                      .map((letter, i) => (\n                        <span key={letter + i}>{letter}</span>\n                      ))}\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n          <div className=\"screen-controls\">\n            <div className=\"field is-grouped\">\n              <p className=\"control\">\n                <button\n                  className=\"button is-fullwidth\"\n                  onClick={() => {\n                    setRound(shuffle(round))\n                  }}\n                >\n                  Re-arrange Cards\n                </button>\n              </p>\n              <p className=\"control\">\n                <button\n                  className=\"button is-fullwidth is-link\"\n                  onClick={() => {\n                    setPlayerReady(true)\n                    setDegree(0)\n                    setTransitionDuration(0)\n                  }}\n                >\n                  I'm Ready to Spin!\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className={cx('screen', { active: !!isPlayerReady })}>\n          <div className=\"screen-content\">\n            <div className={cx('spin-instructions', { spinning: !!prize })}>\n              Spin the cards fast to claim your prize!\n            </div>\n            <div\n              className={`carousel-swipe-container ${isSwappingCards ? 'swapping' : ''}`}\n              onTouchStart={isSwappingCards ? undefined : _onTouchStart}\n              onTouchMove={isSwappingCards ? undefined : _onTouchMove}\n              onTouchEnd={isSwappingCards ? undefined : _onTouchEnd}\n              onMouseDown={isSwappingCards ? undefined : _onMouseDown}\n              onMouseMove={isSwappingCards ? undefined : _onMouseMove}\n              onMouseUp={isSwappingCards ? undefined : _onMouseUp}\n            >\n              <div className={`carousel-container`}>\n                <div\n                  className=\"carousel\"\n                  style={{\n                    transform: 'rotateY(' + degree + 'deg)',\n                    transitionDuration: `${transitionDuration}s`,\n                  }}\n                  onTransitionEnd={_onTransitionEnd}\n                >\n                  {round.map((item, index) => {\n                    const style = isSwappingCards ? {} : { transform: `rotateY(${index * ANGLE}deg) translateZ(160px)` }\n                    return (\n                      <div\n                        className=\"item\"\n                        key={`item-${item}-${index}`}\n                        style={{ backgroundColor: `${COLORS[item]}`, ...style }}\n                      >\n                        {item}\n                      </div>\n                    )\n                  })}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className={cx('screen-controls', { spinning: !!prize })}>\n            <button\n              className=\"button is-fullwidth\"\n              onClick={() => {\n                setPlayerReady(false)\n              }}\n            >\n              Go Back\n            </button>\n          </div>\n        </div>\n        <div className={cx('screen settings', { active: isSettingActive })}>\n          <div className=\"screen-content\">\n            <div className=\"mode\">\n              <div>Mode</div>\n              <div>\n                <ModeDropdown mode={mode} setMode={setMode} player={player} />\n              </div>\n            </div>\n            <Players\n              active={isSettingActive}\n              playersMap={playersMap}\n              player={player}\n              setPlayersMap={setPlayersMap}\n              setPlayer={setPlayer}\n            />\n          </div>\n        </div>\n      </main>\n      <div className={cx('s-modal', { active: !!prizeWon })}>\n        <div className=\"s-modal-content\">\n          <div className=\"is-size-4\">Congratulations!!!</div>\n          <div className=\"subtitle is-size-5\">You won</div>\n          <div className=\"title is-size-1\">{prize}</div>\n          <div className=\"s-modal-controls\">\n            <div className=\"field is-grouped\">\n              <p className=\"control\">\n                <button\n                  className=\"button is-fullwidth is-link\"\n                  onClick={() => {\n                    setPrize(0)\n                    setPrizeWon(0)\n                    setPlayerReady(false)\n                  }}\n                >\n                  Awesome\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}